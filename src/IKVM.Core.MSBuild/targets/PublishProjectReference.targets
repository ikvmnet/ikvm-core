<Project>
    <PropertyGroup>
        <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
    </PropertyGroup>

    <!-- 
    
        PublishProjectReference
        
        These references have their Publish target invoked, with the output being consumed by the containing project.
        
    -->

    <!-- Publish target that returns publish directory. -->
    <Target Name="GetPublishDir" DependsOnTargets="Publish" Returns="$(_PublishDir)">
        <PropertyGroup>
            <_PublishDir>$([System.IO.Path]::GetFullPath('$(PublishDir)'))</_PublishDir>
        </PropertyGroup>
    </Target>

    <Target Name="AssignPublishProjectConfiguration" Condition=" '@(PublishProjectReference)' != '' ">
        <PropertyGroup>
            <OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration Condition="'$(OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration)' == ''">true</OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration>
            <ShouldUnsetParentConfigurationAndPlatform Condition="'$(ShouldUnsetParentConfigurationAndPlatform)' == '' and ('$(BuildingInsideVisualStudio)' == 'true' or '$(BuildingSolutionFile)' == 'true')">true</ShouldUnsetParentConfigurationAndPlatform>
            <ShouldUnsetParentConfigurationAndPlatform Condition="'$(ShouldUnsetParentConfigurationAndPlatform)' == ''">false</ShouldUnsetParentConfigurationAndPlatform>
        </PropertyGroup>
        <AssignProjectConfiguration ProjectReferences="@(PublishProjectReference)" CurrentProject="$(MSBuildProjectFullPath)" CurrentProjectConfiguration="$(Configuration)" CurrentProjectPlatform="$(Platform)" DefaultToVcxPlatformMapping="$(DefaultToVcxPlatformMapping)" VcxToDefaultPlatformMapping="$(VcxToDefaultPlatformMapping)" OutputType="$(OutputType)" ResolveConfigurationPlatformUsingMappings="false" SolutionConfigurationContents="$(CurrentSolutionConfigurationContents)" AddSyntheticProjectReferencesForSolutionDependencies="false" OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration="$(OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration)" ShouldUnsetParentConfigurationAndPlatform="$(ShouldUnsetParentConfigurationAndPlatform)">
            <Output TaskParameter="AssignedProjects" ItemName="_PublishProjectReferenceWithConfiguration"/>
            <Output TaskParameter="UnassignedProjects" ItemName="_PublishProjectReferenceWithConfiguration"/>
        </AssignProjectConfiguration>
    </Target>

    <Target Name="GetPublishProjectReferences" DependsOnTargets="AssignPublishProjectConfiguration" Condition=" '@(_PublishProjectReferenceWithConfiguration)' != '' ">
        <ItemGroup>
            <_PublishProjectReference Include="@(_PublishProjectReferenceWithConfiguration)">
                <ProjectName>$([System.IO.Path]::GetFileNameWithoutExtension('%(Identity)'))</ProjectName>
                <PublishTargetPath Condition=" '%(_PublishProjectReferenceWithConfiguration.PublishTargetPath)' != '' ">$([MSBuild]::EnsureTrailingSlash('%(_PublishProjectReferenceWithConfiguration.PublishTargetPath)'))</PublishTargetPath>
                <PublishPackagePath Condition=" '%(_PublishProjectReferenceWithConfiguration.PublishPackagePath)' != '' ">$([MSBuild]::EnsureTrailingSlash('%(_PublishProjectReferenceWithConfiguration.PublishPackagePath)'))</PublishPackagePath>
            </_PublishProjectReference>
        </ItemGroup>
    </Target>

    <!-- Transforms the contents of a file using a #PARAMETER# replacement strategy. -->
    <UsingTask TaskName="_ApplyPublishProjectReferenceMetadata" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
        <ParameterGroup>
            <Project ParameterType="Microsoft.Build.Framework.ITaskItem" Required="true" />
            <Items ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" Output="true" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System" />
            <Using Namespace="System.IO" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                foreach (var item in Items)
                    foreach (string metadataName in Project.MetadataNames)
                        if (string.IsNullOrEmpty(item.GetMetadata(metadataName)))
                            item.SetMetadata(metadataName, Project.GetMetadata(metadataName));
                ]]>
            </Code>
        </Task>
    </UsingTask>

    <ItemGroup>
        <_PublishProjectReferenceInputItems Include="nothing" />
        <_PublishProjectReferenceInputItems Remove="nothing" />
    </ItemGroup>

    <Target Name="GetPublishProjectReferenceItems" DependsOnTargets="GetPublishProjectReferences" Inputs="@(_PublishProjectReference)" Outputs="%(_PublishProjectReference.Identity)\null" Condition=" '@(_PublishProjectReference)' != '' ">
        <ItemGroup>
            <_PublishProjectReferencesToPublishTarget Include="@(_PublishProjectReference)">
                <Properties>%(_PublishProjectReference.SetConfiguration);%(_PublishProjectReference.SetPlatform);%(_PublishProjectReference.SetTargetFramework);%(_PublishProjectReference.SetRuntimeIdentifier)</Properties>
            </_PublishProjectReferencesToPublishTarget>
        </ItemGroup>
        <MSBuild Projects="@(_PublishProjectReferencesToPublishTarget)" Targets="GetPublishDir" BuildInParallel="$(BuildInParallel)" RemoveProperties="$(_GlobalPropertiesToRemoveFromProjectReferences)" RebaseOutputs="true">
            <Output TaskParameter="TargetOutputs" ItemName="_ResolvedPublishProjectReferencePublishDir" />
        </MSBuild>
        <PropertyGroup>
            <_ResolvedPublishProjectReferencePublishDir>@(_ResolvedPublishProjectReferencePublishDir)</_ResolvedPublishProjectReferencePublishDir>
        </PropertyGroup>
        <ItemGroup>
            <_PublishProjectReferenceInputItems Include="$(_ResolvedPublishProjectReferencePublishDir)**\*" />
        </ItemGroup>
        <Message Text="__PublishProjectReferenceInputItems: @(_PublishProjectReferenceInputItems->'%(RecursiveDir)')" Importance="high" />
        <_ApplyPublishProjectReferenceMetadata Project="@(_PublishProjectReference)" Items="@(_PublishProjectReferenceInputItems)">
            <Output TaskParameter="Items" ItemName="_PublishProjectReferenceInputItemsWithProjectMetadata" />
        </_ApplyPublishProjectReferenceMetadata>
        <ItemGroup>
            <_PublishProjectReferenceItems Include="@(_PublishProjectReferenceInputItemsWithProjectMetadata)">
                <TargetPath>%(_PublishProjectReferenceInputItemsWithProjectMetadata.RecursiveDir)%(_PublishProjectReferenceInputItemsWithProjectMetadata.Filename)%(_PublishProjectReferenceInputItemsWithProjectMetadata.Extension)</TargetPath>
            </_PublishProjectReferenceItems>
        </ItemGroup>
    </Target>

    <Target Name="GetPublishProjectReferenceOutputItems" DependsOnTargets="GetPublishProjectReferenceItems" BeforeTargets="_GetPackageFiles" Condition=" '@(_PublishProjectReferenceItems)' != '' ">
        <ItemGroup>
            <None Include="@(_PublishProjectReferenceItems)">
                <TargetPath Condition=" '%(_PublishProjectReferenceItems.PublishTargetPath)' != '' ">$([MSBuild]::MakeRelative('.', '%(_PublishProjectReferenceItems.PublishTargetPath)%(_PublishProjectReferenceItems.TargetPath)'))</TargetPath>
                <PackagePath Condition=" '%(_PublishProjectReferenceItems.PublishPackagePath)' != '' ">$([MSBuild]::MakeRelative('.', '%(_PublishProjectReferenceItems.PublishPackagePath)%(_PublishProjectReferenceItems.TargetPath)'))</PackagePath>
            </None>
        </ItemGroup>
    </Target>

    <Target Name="GetPublishProjectReferenceItemsForPack" BeforeTargets="_GetPackageFiles" DependsOnTargets="$(GetPublishProjectReferenceItemsForPackDependsOn)">
        
    </Target>

    <PropertyGroup>
        <GetPublishProjectReferenceItemsForPackDependsOn>
            $(GetPublishProjectReferenceItemsForPackDependsOn);
            AssignPublishProjectConfiguration;
            GetPublishProjectReferences;
            GetPublishProjectReferenceItems;
            GetPublishProjectReferenceOutputItems;
        </GetPublishProjectReferenceItemsForPackDependsOn>
    </PropertyGroup>
    
     <PropertyGroup>
        <AssignTargetPathsDependsOn>
            AssignPublishProjectConfiguration;
            GetPublishProjectReferences;
            GetPublishProjectReferenceItems;
            GetPublishProjectReferenceOutputItems;
            $(AssignTargetPathsDependsOn);
        </AssignTargetPathsDependsOn>
    </PropertyGroup>

</Project>
