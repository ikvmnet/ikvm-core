<Project>
    <PropertyGroup>
        <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
    </PropertyGroup>

    <PropertyGroup>
        <_GlobalPropertiesToRemoveFromProjectReferences>$(_GlobalPropertiesToRemoveFromProjectReferences);_GlobalPropertiesToRemoveFromProjectReferences;PublishDir;PackageOutputPath;</_GlobalPropertiesToRemoveFromProjectReferences>
    </PropertyGroup>

    <!-- Attempt to remove the PublishDir from the evaluation graph to prevent multiple evaluation. -->
    <Target Name="AddGlobalPropertiesToRemoveFromProperty" BeforeTargets="AssignProjectConfiguration">
        <ItemGroup>
            <ProjectReference Update="@(ProjectReference)">
                <GlobalPropertiesToRemove>%(ProjectReference.GlobalPropertiesToRemove);$(_GlobalPropertiesToRemoveFromProjectReferences)</GlobalPropertiesToRemove>
            </ProjectReference>
        </ItemGroup>
    </Target>

    <!-- Ensure files that are to be published are set to preserve newest. -->
    <ItemDefinitionGroup>
        <ResolvedFileToPublish>
            <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
        </ResolvedFileToPublish>
    </ItemDefinitionGroup>

    <!-- Adds an index value to each item. Can be used to ensure at least one unique metadata value is available on each item. -->
    <UsingTask TaskName="AddIndexMetadata" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
        <ParameterGroup>
            <Items ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" Output="true" />
            <MetadataName ParameterType="System.String" Required="true" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                var i = 0;
                foreach (var item in Items)
                    item.SetMetadata(MetadataName, (i++).ToString());
                ]]>
            </Code>
        </Task>
    </UsingTask>

    <Import Project="$(MSBuildThisFileDirectory)IKVM.Core.MSBuild.Tasks.targets" Condition=" '$(UseIkvmCoreTasks)' != 'false' "/>
    <Import Project="$(MSBuildThisFileDirectory)IKVM.Core.MSBuild.InlineTasks.targets" Condition=" '$(UseIkvmCoreTasks)' == 'false' "/>

    <Import Project="$(MSBuildThisFileDirectory)GenerateBuildDependencyFileExtensions.targets" />
    <Import Project="$(MSBuildThisFileDirectory)Transform.targets" />
    <Import Project="$(MSBuildThisFileDirectory)IncludeProjectReference.targets" />
    <Import Project="$(MSBuildThisFileDirectory)PackageProjectReference.targets" />
    <Import Project="$(MSBuildThisFileDirectory)PublishProjectReference.targets" />

</Project>
